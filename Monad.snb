{
  "metadata" : {
    "name" : "Monad",
    "user_save_timestamp" : "1970-01-01T01:00:00.000Z",
    "auto_save_timestamp" : "1970-01-01T01:00:00.000Z",
    "language_info" : {
      "name" : "scala",
      "file_extension" : "scala",
      "codemirror_mode" : "text/x-scala"
    },
    "trusted" : true,
    "customLocalRepo" : null,
    "customRepos" : null,
    "customDeps" : null,
    "customImports" : null,
    "customArgs" : null,
    "customSparkConf" : null
  },
  "cells" : [ {
    "metadata" : { },
    "cell_type" : "markdown",
    "source" : "## Monads in Scala ##\n"
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false
    },
    "cell_type" : "code",
    "source" : "//this monad is just for playing around with \"optional\" values\n//it is similar to the Haskellian \"Maybe\" monad\nsealed trait Option[A]{\n    def map[B](fun: A => B): Option[B]\n    def flatMap[B](fun: A => Option[B]): Option[B]\n  }\n  \n  case class Some[A](a: A) extends Option[A] {\n    def map[B](fun: A => B): Option[B] = new Some(fun(a))\n    def flatMap[B](fun: A => Option[B]): Option[B] = fun(a)\n  }\n  case class None[A]() extends Option[A] {\n    def map[B](fun: A => B): Option[B] = new None\n    def flatMap[B](fun: A => Option[B]): Option[B] = new None\n  }\n\n//********************************************************************//\n\n  //here we define a trait describing our Monad \n  //and the two mandatory methods: map & flatMap\n  sealed trait Monad[+A] {\n    def map[B](fun: A => B): Monad[B] = this match {\n      case aMonad(a) => aMonad(fun(a))\n      case NullMonad => NullMonad\n    }\n    \n    def flatMap[B](fun: A => Monad[B]): Monad[B] = this match {\n      case aMonad(a) => fun(a)\n      case NullMonad => NullMonad\n    }\n  }\n\n  //A class that defines a monad by extending the trait\n  case class aMonad[+A](a: A) extends Monad[A] {\n  }\n  //Another class for special \"null\"-monads \n  case object NullMonad extends Monad[Nothing] {\n  }\n  \n  //two simple case classes to be used inside our monad\n  case class AClass(id: Int = -1, value: String = \"undefined\") {\n    \n    override def toString() : String = {\n      s\"ID: $id, Value: $value\"\n    }\n  }\n  case class BClass(id: Int = -1,value: String = \"undefined\",\n                       extra: String = \"extra data\") {\n    override def toString() : String = {\n      s\"ID: $id, Value: $value, Extra: $extra\"\n    }\n  }",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "defined trait Option\r\ndefined class Some\r\ndefined class None\r\ndefined trait Monad\r\ndefined class aMonad\r\ndefined object NullMonad\r\ndefined class AClass\r\ndefined class BClass\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 31
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false
    },
    "cell_type" : "code",
    "source" : "object app extends App {\n  \n  def run() = {\n    \n    def mapAToB(a: AClass) : BClass = {\n      println(\"map on \" + a.toString())\n      new BClass(a.id + 100, \"COPY_FROM_\" + a.value, \"EXTRA \" + a.id)\n    }                                              \n\n    def flatMapAToB(a: AClass) : Monad[BClass] = {\n      println(\"flatMap on \" + a.toString())\n      aMonad(new BClass(a.id + 100,\"COPY_FROM_\" + a.value,\"some extra value\"))\n    }    \n                   \n                                                \n    val numMonad = aMonad[List[Int]](List(1,2,3))  \n\n    //monad.map { mapAToB }                       \n                                                  \n    numMonad.flatMap { x => aMonad(x.map{ a => a.toString() + \"_string\"}) }\n\n  }\n \n  \n}\n \n  ",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "defined object app\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : "$line39.$read$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$app$@7a9f8010"
      },
      "output_type" : "execute_result",
      "execution_count" : 32
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false
    },
    "cell_type" : "code",
    "source" : "app.run()",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "res9: Monad[List[String]] = aMonad(List(1_string, 2_string, 3_string))\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : "aMonad(List(1_string, 2_string, 3_string))"
      },
      "output_type" : "execute_result",
      "execution_count" : 33
    } ]
  } ],
  "nbformat" : 4
}